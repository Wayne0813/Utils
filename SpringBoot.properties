# ==============
# Jrebel激活码
# ==============
http://139.199.89.239:1008/88414687-3b91-4286-89ba-2dc813b107ce



# ==============
# 升级Thymeleaf到最新版
# ==============
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
<properties>
	<java.version>1.8</java.version>
	<thymeleaf.version>3.0.3.RELEASE</thymeleaf.version>
	<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
</properties>
<html xmlns:th="http://www.thymeleaf.org">
# Thymeleaf Layout Dialect 使用
<dependency>
	<groupId>nz.net.ultraq.thymeleaf</groupId>
	<artifactId>thymeleaf-layout-dialect</artifactId>
	<version>2.2.0</version>
</dependency>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">

# ==============
# 添加JDBC Starter
# ==============
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-jdbc</artifactId>
</dependency>

# ==============
# 配置database
# ==============
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql:///mydb
spring.datasource.username=root
spring.datasource.password=rootroot
# 使用tomcat数据库连接池
spring.datasource.tomcat.max-active=20
spring.datasource.tomcat.max-wait=5000
# 使用hikari作为数据库连接池
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
# 使用hikari作为数据库连接池需要引入jar
<dependency>
    <groupId>com.zaxxer</groupId>
    <artifactId>HikariCP</artifactId>
    <version>3.1.0</version>
</dependency>

# ==============
# 添加MyBatis Starter
# ==============
<dependency>
	<groupId>org.mybatis.spring.boot</groupId>
	<artifactId>mybatis-spring-boot-starter</artifactId>
	<version>1.2.0</version>
</dependency>
# MyBatis配置
mybatis.type-aliases-package=com.wayne.pojo
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.mapper-locations=classpath:mapper/*.xml
# 配置SQL日志输出
logging.level.com.wayne.dao.UserMapper=debug
# 编写sql格式
@Mapper
public interface UserMapper {
	@Select("select * from t_user")
	List<User> findAll();
}

# ==============
# 分页插件
# ==============
<!--pagehelper-->
<dependency>
	<groupId>com.github.pagehelper</groupId>
	<artifactId>pagehelper-spring-boot-starter</artifactId>
	<version>1.2.3</version>
</dependency>
# 分页插件配置
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql

# ==============
# 日志管理
# ==============
# 将核心库日志输出级别设置为DEBUG
debug=true
# 将自定义日志输出级别设置为DEBUG
logging.level.com.wayne=debug
# 日志输出到文件中 文件路径，可以是绝对路径也可以是相对路径
logging.file=D:/my.log
# 或
# 指定日志存放目录，在当前目录中产生名称spring.log
logging.path=D:/log

# ==============
# 使用SpringData Redis做为操作类
# ==============
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>
# Redis服务器地址
spring.redis.host=192.168.135.173
# Redis服务器连接端口
spring.redis.port=6379
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# Redis在项目中的使用
private RedisTemplate redisTemplate;
@Autowired
public void setRedisTemplate(RedisTemplate redisTemplate) {
	this.redisTemplate = redisTemplate;
	this.redisTemplate.setKeySerializer(new StringRedisSerializer());
	this.redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(User.class));
}
redisTemplate.opsForValue().set("user:1001",user);


# ==============
# SpringBoot + ActiveMQ
# ==============
<!-- ActiveMQ Starter -->
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-activemq</artifactId>
</dependency>
# 配置MQ服务器地址
spring.activemq.broker-url=tcp://localhost:61616

# ==============
# SpringBoot + Cache
# ==============
<!-- Cache Starter -->
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-cache</artifactId>
</dependency>
<!-- 使用EhCache2.x -->
<dependency>
	<groupId>net.sf.ehcache</groupId>
	<artifactId>ehcache</artifactId>
</dependency>

<ehcache>
	<cache name="movie"	maxEntriesLocalHeap="200" timeToLiveSeconds="10" />
</ehcache>
@Bean
public CacheManager cacheManager() {
	return new EhCacheCacheManager();
}
spring.cache.ehcache.config=classpath:ehcache.xml

# ==============
# 使用Redis Cache
# ==============
# 添加redis 的starter，并配置redis的服务器url和端口，不需要配置
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>
spring.redis.host=192.168.135.173
spring.redis.port=6379

# ==============
# SpringBoot + Dubbo
# ==============
<!-- Dubbo Starter -->
<dependency>
    <groupId>com.alibaba.boot</groupId>
    <artifactId>dubbo-spring-boot-starter</artifactId>
    <version>0.2.0</version>
</dependency>
# ==== 服务生产者 ====
#服务名称
dubbo.application.name=MovieServiceProducer
#注册中心地址
dubbo.registry.address=zookeeper://192.168.135.170:2181
#绑定网卡(非必需)
dubbo.protocol.host=192.168.1.112
#服务端口(非必需)
dubbo.protocol.port=20880
#扫描的服务包名
dubbo.scan.base-packages=com.kaishengit.service.impl
#在服务的接口实现类上添加com.alibaba.dubbo.config.annotation.Service注解

# ==== 服务消费者 ====
#应用名称
dubbo.application.name=MovieServiceConsumer
#注册中心地址
dubbo.registry.address=zookeeper://192.168.135.170:2181
#扫描消费包名
dubbo.scan.base-packages=com.kaishengit.controller
# 在远程调用的服务通过com.alibaba.dubbo.config.annotation.Reference注解进行注入

# ==============
# SpringBoot + Shiro
# ==============
<!-- Shiro Starter -->
<dependency>
	<groupId>org.apache.shiro</groupId>
	<artifactId>shiro-spring-boot-web-starter</artifactId>
	<version>1.4.0</version>
</dependency>
#登录URL
shiro.loginUrl=/
#登录成功的URL
shiro.successUrl=/home
#权限验证失URL
shiro.unauthorizedUrl=/401
# == 配置Realm ==
@Bean
public Realm realm() {
	return new ShiroRealm();
}
# == 配置权限映射关系 ==
@Bean
public ShiroFilterChainDefinition shiroFilterChainDefinition() {
	DefaultShiroFilterChainDefinition chainDefinition = new DefaultShiroFilterChainDefinition();
	chainDefinition.addPathDefinition("/favicon.ico","anon");
	chainDefinition.addPathDefinition("/static/**","anon");
	chainDefinition.addPathDefinition("/logout","logout");
	chainDefinition.addPathDefinition("/**","user");
	return chainDefinition;
}

# ==============
# Shiro + Thymeleaf
# ==============
<!-- Shiro Thymeleaf -->
<dependency>
	<groupId>com.github.theborakompanioni</groupId>
	<artifactId>thymeleaf-extras-shiro</artifactId>
	<version>2.0.0</version>
</dependency>
# == 配置ShiroDialect ==
@Bean
public ShiroDialect shiroDialect() {
	return new ShiroDialect();
}
# == 在网页上添加Schema ==
<html xmlns:shiro="http://www.pollix.at/thymeleaf/shiro">
# 使用
<shiro:principal property="accountName"></shiro:principal>
<p shiro:hasRole="admin">Hello,Admin</p>

